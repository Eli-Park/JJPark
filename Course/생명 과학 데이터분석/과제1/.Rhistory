german$y = ifelse(german$y=="good", 1, 0)
german$y = factor(german$y)
sum(is.na(german))
summary(german)
str(german)
dim(german)
head(german)
barplot(table(german$y), col = "blue", xlab = "Credit", ylab = "Frequency")
fit = glm(y ~., data = german, family = binomial(link = "logit"))
summary(fit)
fit2 = step(fit, direction = "both")
fit2$anova
summary(fit2)
fit2.pred = predict(fit2, newdata = german, type = "response")
cutoff = 0.5
fit2.yhat = ifelse(fit2.pred <= cutoff, 0, 1)
ctable = table(german$y, fit2.yhat,  dnn = c("Actual", "Predicted"))
ctable
miss.err = 1-sum(diag(ctable))/sum(ctable) # Misclassification Rate
miss.err
pred.acc = 1 - miss.err #Prediction Accuracy
pred.acc
diag(ctable)[2]/apply(ctable, 1, sum)[2] # Sensitivity
diag(ctable)[1]/apply(ctable, 1, sum)[1] # Specificity
#install.packages("ROCR")
library(ROCR)
fit.pred = predict(fit, newdata =  german, type = "response")
pred = prediction(fit.pred, german$y)
install.packages("ROCR")
library(ROCR)
fit.pred = predict(fit, newdata =  german, type = "response")
pred = prediction(fit.pred, german$y)
perf = performance(pred, "tpr","fpr")
plot(perf, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = "ROC Curve") #ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(0.6, 0.3, legend = c("Regression","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
performance(pred, "auc")@y.values #AUC
cutoff = 0.6
fit2.yhat = ifelse(fit2.pred <= cutoff, 0, 1)
ctable = table(german$y, fit2.yhat,  dnn = c("Actual", "Predicted"))
ctable
miss.err = 1-sum(diag(ctable))/sum(ctable) # Misclassification Rate
miss.err
pred.acc = 1 - miss.err #Prediction Accuracy
pred.acc
diag(ctable)[2]/apply(ctable, 1, sum)[2] # Sensitivity
diag(ctable)[1]/apply(ctable, 1, sum)[1] # Specificity
install.packages("ROCR")
library(ROCR)
fit.pred = predict(fit, newdata =  german, type = "response")
install.packages("ROCR")
install.packages("ROCR")
perf = performance(pred, "tpr","fpr")
plot(perf, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = "ROC Curve") #ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(0.6, 0.3, legend = c("Regression","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
performance(pred, "auc")@y.values #AUC
cutoff = 0.6
fit2.yhat = ifelse(fit2.pred <= cutoff, 0, 1)
ctable = table(german$y, fit2.yhat,  dnn = c("Actual", "Predicted"))
ctable
miss.err = 1-sum(diag(ctable))/sum(ctable) # Misclassification Rate
miss.err
pred.acc = 1 - miss.err #Prediction Accuracy
pred.acc
diag(ctable)[2]/apply(ctable, 1, sum)[2] # Sensitivity
diag(ctable)[1]/apply(ctable, 1, sum)[1] # Specificity
#install.packages("ROCR")
library(ROCR)
fit.pred = predict(fit, newdata =  german, type = "response")
pred = prediction(fit.pred, german$y)
perf = performance(pred, "tpr","fpr")
plot(perf, col = 4, lwd = 2, xlab = "1-Specificity", ylab = "Sensitivity", main = "ROC Curve") #ROC
lines(x = c(0,1), y = c(0,1), col = 2, lty = 2, lwd = 2)
legend(0.6, 0.3, legend = c("Regression","Random"), col = c(4,2), lty = c(1,2), lwd = 2)
exp(-0.5)/(1+exp(-0.5))
A <- data.frame(ncol=4, nrow=3, c(75, 72, 53, 66, 58, 26, 32, 41, 54
15, 19, 25))
A <- data.frame(c(75, 72, 53, 66, 58, 26, 32, 41, 54
15, 19, 25), ncol=4, nrow=3)
A <- data.frame(c(75, 72, 53, 66, 58, 26, 32, 41, 54,
15, 19, 25), ncol=4, nrow=3)
A
A <- matrix(c(75, 72, 53, 66, 58, 26, 32, 41, 54,
15, 19, 25), ncol=4, nrow=3)
A
colnames(A) <- C(Ssize, NofR, ybar, sy)
colnames(A) <- C("Ssize", "NofR", "ybar", "sy")
colnames(A)
A <- as.data.frame(A)
A
A <- C("Ssize", "NofR", "ybar", "sy")
colnames(A) <- c("Ssize", "NofR", "ybar", "sy")
A
t <- A[,2]*A[,3]
t
t <- A[,4]^2
ts <- A[,4]^2
var <- A[,4]^2
var/(A[,2]/150)
var*(A[,2]/150)
sqrt(var*(A[,2]/150))
sqrt(sum(var*(A[,2]/150)))
#(a)
ybar.unb <- sum(A[,3]*A[,2])/150
ybar.unb
weight <- A[,2]/A[,1]
weight
weight <- A[,1]/A[,2]
weight
w <- A[,1]/A[,2]
w
a
a <- A[,1]/200
a
ybar.wc <- a*A[,3]
ybar.wc
ybar.wc <- sum(a*A[,3])
ybar.wc
A.1 <- c(A, c(700, 800, 500))
A.1
Po <- matrix(c(700, 800, 500), nrow=3)
Po
A.1 <- c(A,Po)
A.1
A.1 <- merge(A, Po)
A.1
A.1 <- merge(x~y, A, Po)
Po <- as.data.frame(Po)
merge(A, Po)
Po
A.1 <- cbind(A, Po)
A.1
ybar.post <- sum((A.1[,1]/A.1[,5])*A.1[,3])
ybar.post
ybar.post <- sum((A.1[,5]/2000)*A.1[,3])
ybar.post
sd.post <- sqrt(sum(var*(A.1[,5]/2000)))
sd.post
install.packages("readxl")
library("readxl")
A <- read_excel("C:/Users/pkmon/Desktop/training_data_movies.xlsx")
head(A)
A[,3]
A[,5]
A[1,5]
A[,6]
View(A)
A <- function(p) {
a <- 135*p + 75*(1-p)
b <- sqrt(((135-a)^2)*p+((75-a)^2)*(1-p))
print(a)
print(b)
}
A(0.25)
B <- function(p) {
a <- 160*p + 40*(1-p)
b <- sqrt(((160-a)^2)*p+((40-a)^2)*(1-p))
print(a)
print(b)
}
B(0.25)
A(0.5)
B(0.5)
A(0.75)
B(0.75)
(1/(1+0.15))*(1-(1/(1+0/15)^5))/(1-(1/(1+0.15)))
(1/(1+0.15))*(1-(1/(1+0.15)^5))/(1-(1/(1+0.15)))
1000/(1/(1+0.15))*(1-(1/(1+0.15)^5))/(1-(1/(1+0.15)))
1000*((1/(1+0.15))*(1-(1/(1+0.15)^5))/(1-(1/(1+0.15))))
1000/(((1/(1+0.15))*(1-(1/(1+0.15)^5))/(1-(1/(1+0.15)))))
?t.test
m <- c(108, 138, 124, 163, 124, 159, 106, 134, 115, 139)
t.test(m, alternative = "greater". mu = 120)
t.test(m, alternative = "greater", mu = 120)
qt(1.17798)
qt(1.17798, df=9)
?qt
dt(1.17798, df=9)
pt(1.17798, df=9)
qt(0.1894522)
qt(0.1894522, df=9)
qt(08654, df=9)
qt(0.8654, df=9)
t.test(m, alternative = "greater", mu = 120)
t.test
?t.test
t.test(m, alternative = "greater", mu = 120, conf.level = 0.99)
#2
g1 <- c(16.03, 16.01, 16.04, 15.96, 16.05, 15.98, 16.05, 16.02, 16.02, 15.99)
g2 <- c(16.02, 16.03, 15.97, 16.04, 15.96, 16.02, 16.01, 16.01, 15.99, 16.00)
res <- aov(values ~ ind, data=d)
d<- stack(list(g1=g1, g2=g2))
oneway.test(values ~ ind, data=d, var.equal=TRUE)
?oneway.test
oneway.test(values ~ ind, data=d, var.equal=FALSE)
?t.test
t.test(g1, g2, mu = 16, conf.level = 0.95)
t.test(g1, g2, mu = 16, alternative = "two.sided", conf.level = 0.95)
t.test(g1, g2, mu = 16, alternative = "two.sided", conf.level = 0.95, var.equal=FALSE)
t.test(g1, g2, mu = 0, alternative = "two.sided", conf.level = 0.95, var.equal=FALSE)
#3
g1 <- c(9.9, 10.6, 9.4, 10.3, 10.0, 9.3, 10.3, 9.8)
g2 <- c(10.2, 10.6, 10.0, 10.2, 10.7, 10.4, 10.5, 10.3)
t.test(g1, g2, mu = 0, alternative = "two.sided", conf.level = 0.95, var.equal=TRUE)
h0 <- c(rnorm(10), rnorm(10), rnorm(10))
h0
h1 <- c(h0[1:10]+3, h0[11:20]+5, h0[21:30]+7)
h0 <- h0+5
h0 <- (h0-mean(h0))/sqrt(var(h0))
h1 <- (h1-mean(h1))/sqrt(var(h1))
h0_1 <- h0[1:10]
h0_2 <- h0[11:20]
h0_3 <- h0[21:30]
h1_1 <- h1[1:10]
h1_2 <- h1[11:20]
h1_3 <- h1[21:30]
stripchart(list(Group1 = h0_1, Group2 = h0_2, Group3 = h0_3),pch=c(16,16,16),col=c("red","blue","black"), cex=1)
abline(v=mean(h0))
stripchart(list(Group1 = h1_1, Group2 = h1_2, Group3 = h1_3),pch=c(16,16,16),col=c("red","blue","black"), cex=1)
abline(v=mean(h1))
?normalprobability
?normal plot
qqnorm(g1)
par(mfrow=c(1,2))
qqnorm(g1)
qqline(g1)
qqnorm(g2)
qqline(g2)
par(mfrow=c(1,1))
qqnorm(g1)
qqline(g1)
qqnorm(g2)
qqline(g2)
res <- aov(values ~ ind, data=d)
res
summary(res)
# Check the contents of res
ls(res)
qqnorm(resid)
# Normal probability plot of residual
resid <- res$residuals
qqnorm(resid)
qqline(resid)
par(mfrow=c(1,1),pch=5)
# Residual plot
predicted <- res$fitted.values
plot(predicted, resid)
abline(h=0)
install.packages("pwr")
#4
library(pwr)
pwr.anova.test(f=0.90,k=4,n=20,sig.level=0.05)
pwr.anova.test(f=0.90, k=4,n=5,sig.level=0.05)
pwr.anova.test(f=0.90, k=4, n=6,sig.level=0.05)
pwr.anova.test(power=0.9, k=4, n=6,sig.level=0.05)
pwr.anova.test(power=0.9, k=4, sig.level=0.05)
?pwr.anova.test
#5
p15 <- c(7, 7, 15, 11, 9)
p20 <- c(12, 17, 12, 18, 18)
p25 <- c(14, 19, 19, 18, 18)
p30 <- c(19, 25, 22, 19, 23)
p35 <- c(7, 10, 11, 15, 11)
install.packages("agricolae")
library(agricolae)
d<- stack(list(p15=p15,p20=p20,p25=p25,p30=p30, p35=p35))
LSD     <- LSD.test(d$values, d$ind, 16, MSerror)
res <- aov(values ~ ind, data=d)
df <- df.residual(res)
MSerror <- deviance(res)/df
res
summary(res)
?LSD
?LSD.test
d
summary(res)
df <- df.residual(res)
MSerror <- deviance(res)/df
LSD     <- LSD.test(d$values, d$ind, 16, MSerror)
TUKEY   <- TukeyHSD(res)
SCHEFFE <- scheffe.test(res,"ind", group=FALSE, console=FALSE)
LSD
#6
t1 <- c(143, 141, 150, 146)
t2 <- c(152, 149, 137, 143)
t3 <- c(134, 136, 132, 127)
t4 <- c(129, 127, 132, 129)
d<- stack(list(t1=t1,t2=t2,t3=t3,t4=t4))
b <- read.csv("C:/Users/pkmon/Desktop/생과데1/B.csv")
b
diet <- read.csv("C:/Users/pkmon/Desktop/생과데1/diet.csv")
diet
?t.test
#1
b1 <- b[group=1, ]
#1
b1 <- b[group="1", ]
#1
b1 <- b[group=="1", ]
#1
b1 <- b[b[1,]==1, ]
b1
b2 <- b[b[1,]==2, ]
str(b)
str(b1)
t.test(b1, b2)
str(b2)
b <- read.csv("C:/Users/pkmon/Desktop/생과데1/B.csv")
#1
b1 <- b[b[1,]==1, ]
b2 <- b[b[1,]==2, ]
b <- read.csv("C:/Users/pkmon/Desktop/생과데1/B.csv")
#1
b1 <- b[b[,1]==1, ]
b2 <- b[b[,1]==2, ]
str(b2)
str(b1)
t.test(b1, b2, var.eqaul=FALSE)
t.test(b1, b2, var.equal=FALSE)
t.test(b1, b2, var.equal=TRUE)
?standarderror
?standard error
std <- function(x) sd(x)/sqrt(length(x))
std(b1)/std(b2)
std(b1$x)/std(b2$x)
std(b2$x)/std(b1$x)
sd(b2$x)/sd(b1$x)
1/(sd(b2$x)/sd(b1$x))
res <- aov(x ~ group, data=b)
res
summary(res)
var.test(x ~ group, data=b, alternative = "two.sided")
1/0.56701
View(diet)
#7
res <- aov(kg ~ exercise + meal, data=diet)
res
summary(res)
str(diet)
#7
res <- maova(kg ~ exercise + meal, data=diet)
#7
res <- manova(kg ~ exercise + meal, data=diet)
str(diet)
diet$meal <- as.factor(diet$meal)
#7
res <- manova(kg ~ exercise + meal, data=diet)
#7
res <- aov(kg ~ exercise + meal, data=diet)
res
summary(res)
library(agricolae)
SCHEFFE <- scheffe.test(res,"ind", group=FALSE, console=FALSE)
?TukeyHSD
SCHEFFE
SCHEFFE <- scheffe.test(res, "kg", group=FALSE, console=FALSE)
SCHEFFE
SCHEFFE <- scheffe.test(res, "exercise", group=FALSE, console=FALSE)
SCHEFFE
SCHEFFE1 <- scheffe.test(res, "exercise", group=TRUE, console=FALSE)
SCHEFFE2 <- scheffe.test(res, "meal", group=TRUE, console=FALSE)
SCHEFFE1
SCHEFFE2
SCHEFFE1 <- scheffe.test(res, c("exercise","meal"), group=TRUE, console=FALSE)
SCHEFFE1
b <- read.csv("C:/Users/pkmon/Desktop/생과데1/B.csv")
diet <- read.csv("C:/Users/pkmon/Desktop/생과데1/diet.csv")
diet$meal <- as.factor(diet$meal)
#1
var.test(x ~ group, data=b, alternative = "two.sided")
#1
var.test(x ~ group, data=b, alternative = "two.sided")
#1
t.test(b1, b2)
#1
var(b1)
var(b2)
#1
var(b1)/var(b2)
var.test(x ~ group, data=b, alternative = "two.sided")
b <- read.csv("C:/Users/pkmon/Desktop/생과데1/B.csv")
diet <- read.csv("C:/Users/pkmon/Desktop/생과데1/diet.csv")
diet$meal <- as.factor(diet$meal)
var.test(x ~ group, data=b, alternative = "two.sided")
#1
var(b1)
var(b2)
#7
res <- aov(kg ~ exercise + meal, data=diet)
res
summary(res)
SCHEFFE1 <- scheffe.test(res, "exercise", group=TRUE, console=FALSE)
SCHEFFE2 <- scheffe.test(res, "meal", group=TRUE, console=FALSE)
SCHEFFE1
SCHEFFE2
Rcor
Coron <- read.csv("COR.csv")
#Data Read
setwd("C:/Users/pkmon/Desktop/생과데1")
App <- read.csv("Approval.csv")
Can <- read.csv("CANCER.csv")
Coron <- read.csv("COR.csv")
Dep <- read.csv("Depress.csv")
Ery <- read.csv("ERY.csv")
Hiv <- read.csv("HIV.csv")
#3-9
Rcor <- xtabs(count ~ dignosis + disease, data = Coron)
Rcor
(0.62786*0.1)/((0.62786*0.1)+((1-0.82301)*(1-0.1)))
(0.82301*0.9)/((0.82301*0.9)+((1-0.62786)*(0.1)))
#Data Read
setwd("C:/Users/pkmon/Desktop/생과데1")
App <- read.csv("Approval.csv")
Can <- read.csv("CANCER.csv")
Coron <- read.csv("COR.csv")
Dep <- read.csv("Depress.csv")
Ery <- read.csv("ERY.csv")
Hiv <- read.csv("HIV.csv")
#3-1
#(a)
Dep$thr <- as.factor(Dep$thr)
Dep$dep <- as.factor(Dep$dep)
Rdep <- xtabs(obs ~ thr + dep, data=Dep)
Rdep
RR <- ((Rdep[1,1])/sum(Rdep[1,]))/((Rdep[2,1])/sum(Rdep[2,]))
OR <- (((Rdep[1,1])/sum(Rdep[,1]))/((Rdep[2,1])/sum(Rdep[,1])))/(((Rdep[1,2])/sum(Rdep[,2]))/((Rdep[2,2])/sum(Rdep[,2])))
RR
RR
OR
App <- read.csv("Approval.csv")
Can <- read.csv("CANCER.csv")
Coron <- read.csv("COR.csv")
Dep <- read.csv("Depress.csv")
Ery <- read.csv("ERY.csv")
Hiv <- read.csv("HIV.csv")
#3-1
#(a)
Dep$thr <- as.factor(Dep$thr)
Dep$dep <- as.factor(Dep$dep)
Rdep <- xtabs(obs ~ thr + dep, data=Dep)
Rdep
RR <- ((Rdep[1,1])/sum(Rdep[1,]))/((Rdep[2,1])/sum(Rdep[2,]))
OR <- (((Rdep[1,1])/sum(Rdep[,1]))/((Rdep[2,1])/sum(Rdep[,1])))/(((Rdep[1,2])/sum(Rdep[,2]))/((Rdep[2,2])/sum(Rdep[,2])))
RR
OR
install.packages("epiR")
library("epiR")
epi.2by2(Rdep, method="cohort.count", conf.level = 0.95)
#3-4
library("DescTools")
Rhiv <- xtabs(obs ~ hpv + hiv, data=Hiv)
Rhiv
chisq.test(Rhiv)
#Data Read
setwd("C:/Users/pkmon/Desktop/생과데1")
App <- read.csv("Approval.csv")
Can <- read.csv("CANCER.csv")
Coron <- read.csv("COR.csv")
Dep <- read.csv("Depress.csv")
Ery <- read.csv("ERY.csv")
Hiv <- read.csv("HIV.csv")
#3-1
#(a)
library("epiR")
Dep$thr <- as.factor(Dep$thr)
Dep$dep <- as.factor(Dep$dep)
Rdep <- xtabs(obs ~ thr + dep, data=Dep)
Rdep
epi.2by2(Rdep, method="cohort.count", conf.level = 0.95)
#3-4
library("DescTools")
Rhiv <- xtabs(obs ~ hpv + hiv, data=Hiv)
Rhiv
chisq.test(Rhiv)
#3-5
Rcan <- xtabs(obs ~ treat + result, data=Can)
fisher.test(Rcan)
Rcan
fisher.test(Rcan)
#3-7
Rapp <- xtabs(count ~ first + second, data=App)
Rapp
mcnemar.test(Rapp)
#3-8
str(Ery)
Ery$Severity = factor(Ery$Severity, levels=unique(Ery$Severity))
Rery = xtabs(count ~ Gender + Survival + Severity, data=Ery)
Rery
mantelhaen.test(Rery)
Rapp
mcnemar.test(Rapp)
?mcnemar.test
mcnemar.test(Rapp, correct = FALSE)
Rapp
mcnemar.test(Rapp, correct = FALSE)
?mantelhaen.test
Rery
mantelhaen.test(Rery, correct = FALSE)
#3-9
Rcor <- xtabs(count ~ dignosis + disease, data = Coron)
Rcor
Sensit <- Rcor[1,1]/sum(Rcor[,1])
Speci <- Rcor[2,2]/sum(Rcor[,2])
Sensitivity <- Rcor[1,1]/sum(Rcor[,1])
Specificity <- Rcor[2,2]/sum(Rcor[,2])
PPT <- (Sensitivity*0.1)/((Sensitivity*0.1)+((1-Specificity)*(1-0.1)))
PNT <- (Specificity*0.9)/((Specificity*0.9)+((1-Sensitivity)*(0.1)))
c(Sensitivity, Specificity, PPT, PNT)
result <- c(Sensitivity, Specificity, PPT, PNT)
names(result) <- c("Sensitivity", "Specificity", "PPT", "PNT")
result
