}
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
for(i in 2:36) {
barplot(A[,i], xlab=c("C1", "C2"),main = C[i])
}
factorscores.k <- kmeans(factorscores.s, 2, nstart = 100); factorscores.k
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
pc <- princomp(complete.data.a)
plot3d(pc$scores[,1:3], col=f$cluster) ###clus plot의 3d 버전
d.complete.data.a <- dist(complete.data.a, method = "euclidean")
plot(complete.data.a.ward <- hclust(d.complete.data.a, method="ward.D"), hang=-1,
main="Cluster Dendrogram: Ward??s Method")
rect.hclust(complete.data.a.ward, 2)
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
ggpairs(f[,1:4], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Music
A<-aggregate(f[, 1:35], list(f$cluster), mean); A
B<-aggregate(f[, 1:35], list(f$cluster), var); B
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
par(mfrow=c(1,1))
par(mfrow=c(1,1))
factorscores.k <- kmeans(factorscores.s[,1:17], 3, nstart = 100); factorscores.k
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
pc <- princomp(complete.data.a)
plot3d(pc$scores[,1:3], col=f$cluster) #잘 구분이 된 것이 보인다.
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
A<-aggregate(f[, 1:35], list(f$cluster), mean); A
B<-aggregate(f[, 1:35], list(f$cluster), var); B
C<-colnames(A)
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
setwd("C:/Users/pkmon/Desktop/Multivariate Team/Mulitvariate 0525")
### Multivariate_JW ###
complete.data <- read.csv("newresponse_0523.csv", header = T)
### DATA (150 col) ###
complete.data.a <- complete.data[,1:140] ## subjective
complete.data.b <- complete.data[,141:150] ## demographics
### PCA ###
music <- complete.data[,1:19]
movies <- complete.data[,20:31]
hobbies <- complete.data[,32:63]
phobias <- complete.data[,64:73]
personality <- complete.data[,77:133]
spending <- complete.data[,134:140]
## music ##
pca.music <- princomp(music)
health <- complete.data[,74:76]
plot(c(1:length(music)), pca.music$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.music) #4PC
## movies ##
pca.movies <- princomp(movies)
plot(c(1:length(movies)), pca.movies$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.movies) #3PC
## hobbies ##
pca.hobbies <- princomp(hobbies)
plot(c(1:length(hobbies)), pca.hobbies$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.hobbies) #7PC
## phobias ##
pca.phobias <- princomp(phobias)
plot(c(1:length(phobias)), pca.phobias$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.phobias) #3PC
## personality ##
pca.personality <- princomp(personality)
plot(c(1:length(personality)), pca.personality$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.personality) #13PC
## spending ##
pca.spending <- princomp(spending)
plot(c(1:length(spending)), pca.spending$sdev, type="b", main="Scree Plot",
xlab="Component Number", ylab="Eigenvalues")
summary(pca.spending) #2PC
## music ##
efa.music <- factanal(music, factors=4, rotation="varimax", scores="regression"); efa.music$scores
## movies ##
efa.movies <- factanal(movies, factors=3, rotation="varimax", scores="regression"); efa.movies$scores
## hobbies ##
efa.hobbies <- factanal(hobbies, factors=7, rotation="varimax", scores="regression"); efa.hobbies$scores
## phobias ##
efa.phobias <- factanal(phobias, factors=3, rotation="varimax", scores="regression"); efa.phobias$scores
## health ## -> scaling?
health.score <- scale(health); health.score
## personality ##
efa.personality <- factanal(personality, factors=13, rotation="varimax", scores="regression"); efa.personality$scores
## spending ##
efa.spending <- factanal(spending, factors=2, rotation="varimax", scores="regression"); efa.spending$scores
factorscores <- cbind(efa.music$scores, efa.movies$scores, efa.hobbies$scores, efa.phobias$scores, health.score, efa.personality$scores, efa.spending$scores)
colnames(factorscores) <- c("mus.quite", "mus.rock", "mus.noisy", "mus.pop",
"mov.fantasy", "mov.action", "mov.horror",
"hob.alone", "hob.science", "hob.liberalarts", "hob.IT", "hob.gossip", "hob.sports", "hob.math",
"pho.wild", "pho.animal", "pho.dog",
"heal.smoke", "heal.drink", "heal.lifestyle",
"per.social", "per.lonely", "per.work", "per.kind", "per.reliability", "per.HR", "per.angry",
"per.decisive&religious", "per.hypochondria", "per.family", "per.selfcriticism", "per.charity", "per.judgement",
"spend.on", "spend.at")
### Clustering ###
library("cluster")
library("NbClust")
factorscores.s <- scale(factorscores)
#pseudo_F
str(factorscores.s)
n=nrow(factorscores.s)
withinss = pseudof = NULL
for(i in 1:20){
km<-kmeans(factorscores.s, centers=i)
withinss<-c(withinss, km$tot.withinss)
f<-(km$betweenss/(i-1))/(km$tot.withinss/(n-i))
pseudof<-c(pseudof,f)
}
par(mfrow=c(1,1))
n=nrow(factorscores.s)
withinss = pseudof = NULL
for(i in 1:20){
km<-kmeans(factorscores.s, centers=i)
withinss<-c(withinss, km$tot.withinss)
f<-(km$betweenss/(i-1))/(km$tot.withinss/(n-i))
pseudof<-c(pseudof,f)
}
par(mfrow=c(1,1))
plot(pseudof, type="b", main='Pseudo-F plot')
library(tidyverse)
library(rgl)
library(GGally)
###How many variables?
##Using all variables
nb <- NbClust(factorscores.s, diss=NULL, distance = "euclidean",
min.nc=2, max.nc=6, method = "kmeans",
index = "all", alphaBeale = 0.1) ## 2 clusters
par(mfrow=c(1,1))
factorscores.k <- kmeans(factorscores.s, 2, nstart = 100); factorscores.k
f <- as.data.frame(factorscores.s)
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
pc <- princomp(complete.data.a)
plot3d(pc$scores[,1:3], col=f$cluster) ###clus plot의 3d 버전
d.complete.data.a <- dist(complete.data.a, method = "euclidean")
plot(complete.data.a.ward <- hclust(d.complete.data.a, method="ward.D"), hang=-1,
main="Cluster Dendrogram: Ward??s Method")
rect.hclust(complete.data.a.ward, 2)
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
#분포 및 시각
ggpairs(f[,1:4], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Music
ggpairs(f[,5:7], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Movie
ggpairs(f[,8:14], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Hobby
ggpairs(f[,15:17], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Phobia
ggpairs(f[,18:20], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Health
ggpairs(f[,34:35], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Spending
ggpairs(f[,21:33], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Personality
ggpairs(f[,36:45], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Demographic
#각 변수의 클러스터별 평균
A<-aggregate(f[, 1:35], list(f$cluster), mean); A
B<-aggregate(f[, 1:35], list(f$cluster), var); B
#Graph
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
C<-colnames(A)
#Graph
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
factorscores.k <- kmeans(factorscores.s[,1:17], 3, nstart = 100); factorscores.k
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
pc <- princomp(complete.data.a)
plot3d(pc$scores[,1:3], col=f$cluster) #잘 구분이 된 것이 보인다.
d.complete.data.a <- dist(complete.data.a, method = "euclidean")
plot(complete.data.a.ward <- hclust(d.complete.data.a, method="ward.D"), hang=-1,
main="Cluster Dendrogram: Ward??s Method")
rect.hclust(complete.data.a.ward, 3)
par(mfrow=c(1,1))
plot(complete.data.a.ward <- hclust(d.complete.data.a, method="ward.D"), hang=-1,
main="Cluster Dendrogram: Ward??s Method")
rect.hclust(complete.data.a.ward, 3)
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster)
ggpairs(f[,1:4], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Music
ggpairs(f[,36:45], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Demographic
A<-aggregate(f[, 1:35], list(f$cluster), mean); A
C<-colnames(A)
B<-aggregate(f[, 1:35], list(f$cluster), var); B
par(mfrow=c(3,3))
for(i in 2:36) {
barplot(A[,i], main = C[i])
}
ggpairs(f[,21:33], aes(colour = as.factor(factorscores.k$cluster), alpha = 0.4)) #Personality
setwd("C:/Users/pkmon/Desktop/Multivariate Team/MULTIV~2")
data <- read.csv("responses.csv")
data1 <- data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
table(data2=="")
library("VIM")
library("Amelia")
aggr(data1,prop=FALSE,numbers=TRUE, cex.axis = par("cex"))
missmap(data1, y.cex = 0.5, x.cex = 0.5) #NA를 매핑
Misscol <- apply(data1, 2, function(x) sum(is.na(x))) #열별 NA수
sort(Misscol)
Missrow <- apply(data1, 1, function(x) sum(is.na(x))) #행별 NA수
table(Missrow) #행 자체를 지우기에는 상당히 많은 행에 NA 분포
library("mice")
methods(mice) #Mice에서 사용하는 다중대입법의 종류들
imputed.data2 <- mice(data2, seed=1234)#mice package 이용, 5번 다중대입번 사용
complete.data <- read.csv("newresponse.csv")
data1 <- complete.data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- complete.data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
data11 <- data1[,1:19]
data12 <- data1[,20:31]
data13 <- data1[,32:63]
data14 <- data1[,64:73]
#EDA 시각화
library("tidyverse")
library("ggplot2")
table(complete.data$Gender)
table(complete.data$Age)
table(complete.data$Education)
ggplot(complete.data, aes(x=Age, fill=Gender))+
geom_bar()
ggplot(complete.data, aes(x=Age, fill=Education))+
geom_bar()
library(corrplot)
corr <- cor(data1)
corrplot(corr, method="ellipse", tl.cex = 0.7)
str(data2)
#PCA
PCA.data <- princomp(data1, scale=T)
summary(PCA.data)
#PCA
PCA.data <- princomp(data1, scale=T)
?hclust
?rect.hclust
?CUTTREE
?cuttree
?cutree
cutree(complete.data.a.ward, k=2)
cluster.h <- cutree(complete.data.a.ward, k=2)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster, cluster.h)
table(factorscores.k$cluster == cluster.h)
data1 <- complete.data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- complete.data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
#PCA
PCA.data <- princomp(data1, scale=T)
summary(PCA.data)
plot(x=c(1:73),PCA.data$sdev^2, type="l")
points(PCA.data$sdev^2)
abline(h=1, col="red")
PCA.data11 <- princomp(data11, scale=T)
PCA.data12 <- princomp(data12, scale=T)
PCA.data13 <- princomp(data13, scale=T)
PCA.data14 <- princomp(data14, scale=T)
data11 <- data1[,1:19]
data12 <- data1[,20:31]
data13 <- data1[,32:63]
data14 <- data1[,64:73]
EFA.data <- factanal(data1, 13)
EFA.data11 <- factanal(data11, 4, scores= "regression")
EFA.data12 <- factanal(data12, 3, scores= "regression")
EFA.data13 <- factanal(data13, 7, scores= "regression")
EFA.data14 <- factanal(data14, 3, scores= "regression")
EFA.data11
EFA.data
EFA.data$uniquenesses
EFA.data12$uniquenesses
EFA.data11$uniquenesses
EFA.data12$uniquenesses
table(factorscores.k$cluster, cluster.h)
factorscores.k <- kmeans(factorscores.s, 2, nstart = 100); factorscores.k
table(factorscores.k$cluster, cluster.h)
setwd("C:/Users/pkmon/Desktop/Multivariate Team/MULTIV~2")
complete.data <- read.csv("newresponse.csv")
data1 <- complete.data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- complete.data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
data11 <- data1[,1:19]
data12 <- data1[,20:31]
data13 <- data1[,32:63]
data14 <- data1[,64:73]
#PCA
PCA.data <- princomp(data1, scale=T)
summary(PCA.data)
PCA.data11 <- princomp(data11, scale=T)
PCA.data12 <- princomp(data12, scale=T)
PCA.data13 <- princomp(data13, scale=T)
PCA.data11 <- princomp(data11)
PCA.data12 <- princomp(data12)
PCA.data13 <- princomp(data13)
PCA.data14 <- princomp(data14)
summary(PCA.data11)
summary(PCA.data12)
summary(PCA.data13)
summary(PCA.data14)
summary(PCA.data11)
EFA.data11 <- factanal(data11, 9, scores= "regression")
EFA.data11
EFA.data11$uniquenesses
EFA.data11 <- factanal(data11, 9, scores= "regression")
EFA.data11$uniquenesses
summary(PCA.data12)
EFA.data11 <- factanal(data11, 9, scores= "regression")
EFA.data12 <- factanal(data12, 6, scores= "regression")
EFA.data12$uniquenesses
summary(PCA.data13)
EFA.data11 <- factanal(data11, 9, scores= "regression")
EFA.data12 <- factanal(data12, 6, scores= "regression")
EFA.data13 <- factanal(data13, 20, scores= "regression")
EFA.data13 <- factanal(data13, 20, scores= "regression")
EFA.data13 <- factanal(data13, 20, scores= "regression")
EFA.data13 <- factanal(data13, 19, scores= "regression")
EFA.data13$uniquenesses
summary(PCA.data14)
data14 <- data1[,64:73]
EFA.data14 <- factanal(data14, 8, scores= "regression")
EFA.data13$uniquenesses
EFA.data14 <- factanal(data14, 6, scores= "regression")
EFA.data14$uniquenesses
summary(PCA.data14)
f <- as.data.frame(factorscores.s)
f <- cbind(f, complete.data.b, cluster = factorscores.k$cluster, cluster.h)
ggpairs(f[,36:45], aes(colour = as.factor(cluster.h), alpha = 0.4)) #Demographic
table(factorscores.k$cluster, cluster.h)
#각 변수의 클러스터별 평균
A<-aggregate(f[, 1:35], list(f$cluster), mean); A
#Validation
a <- sample(nrow(f), p=c(0.1))
#Validation
a <- sample(nrow(f), p=0.7)
?sample
#Validation
a <- sample(nrow(f), 0.7*nrow(f))
a
vf <- f[-a,]
tf <- f[a,]
factorscores.k$centers
?kmeans
?knn
f <- as.data.frame(factorscores.s)
a <- knn(f, factorscores.k$centers, factorscores.k$cluster, k=2)
a <- KNN(f, factorscores.k$centers, factorscores.k$cluster, k=2)
a <- Knn(f, factorscores.k$centers, factorscores.k$cluster, k=2)
a <- kNN(f, factorscores.k$centers, factorscores.k$cluster, k=2)
?kmeans
factorscores.k$centers
a <- kmeans(f, factorscores.k$centers, k=2)
a <- kmeans(f, factorscores.k$centers)
a$cluster
setwd("C:/Users/pkmon/Desktop/Multivariate Team/MULTIV~2")
data <- read.csv("responses.csv")
data1 <- data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
library("VIM")
library("Amelia")
aggr(data1,prop=FALSE,numbers=TRUE, cex.axis = par("cex"))
missmap(data1, y.cex = 0.5, x.cex = 0.5) #NA를 매핑
Misscol <- apply(data1, 2, function(x) sum(is.na(x))) #열별 NA수
sort(Misscol)
barplot(sort(Misscol))
aggr(data1,prop=FALSE,numbers=TRUE, cex.axis = par("cex"))
missmap(data1, y.cex = 0.5, x.cex = 0.25) #NA를 매핑
missmap(data1, y.cex = 0.5, x.cex = 0.5) #NA를 매핑
Missrow <- apply(data1, 1, function(x) sum(is.na(x))) #행별 NA수
table(Missrow) #행 자체를 지우기에는 상당히 많은 행에 NA 분포
library("mice")
methods(mice) #Mice에서 사용하는 다중대입법의 종류들
imputed.data1 <- mice(data1, seed=1234)
imputed.data1$imp$Politics #실제로 어떤 값이 대입되었는지 보여줌
imputed.data1$method
methods(mice) #Mice에서 사용하는 다중대입법의 종류들
>methods
?methods
?mice
imputed.data1 <- mice(data1, method = rf, seed=1234)
imputed.data1 <- mice(data1, method = "rf", seed=1234)
imputed.data1$method
complete.data <- read.csv("newresponse.csv")
#complete.data1 <- complete(imputed.data1, sample(1:5,1)) #랜덤한 n번째 대입된 값 사용
#complete.data2 <- complete(imputed.data2, sample(1:5,1)) #랜덤한 n번째 대입된 값 사용
missmap(complete.data, y.cex = 0.5, x.cex = 0.5) #NA가 다 메꾸어짐
#EDA 시각화
library("tidyverse")
library("ggplot2")
table(complete.data$Gender)
table(complete.data$Age)
table(complete.data$Education)
ggplot(complete.data, aes(x=Age, fill=Gender))+
geom_bar()
ggplot(complete.data, aes(x=Gender))+
geom_bar()
ggplot(complete.data, aes(x=Gender, fill=Gender))+
geom_bar()
View(complete.data)
ggplot(complete.data, aes(x=Age, fill=Gender))+
geom_bar()
ggplot(complete.data, aes(x=Age, fill=Education))+
geom_bar()
colnames(complete.data)
ggplot(complete.data, aes(x=Only.child, fill=Education))+
geom_bar()
ggplot(complete.data, aes(x=Village...town, fill=Education))+
geom_bar()
ggplot(complete.data, aes(x=Only.child, fill=Only.child))+
geom_bar()
ggplot(complete.data, aes(x=Only.child, fill=Number.of.siblings))+
geom_bar()
str(complete.data)
str(complete.data$Number.of.siblings)
ggplot(complete.data, aes(x=Only.child, fill=Number.of.siblings))+
geom_bar()
ggplot(complete.data, aes(x=Number.of.siblings, fill=Only.child))+
geom_bar()
ggplot(complete.data, aes(x=as.factor(Number.of.siblings), fill=Only.child))+
geom_bar()
ggplot(complete.data, aes(x=Only.child, fill=as.factor(Number.of.siblings)))+
geom_bar()
ggplot(complete.data, aes(x=Only.child)))+
geom_bar()
ggplot(complete.data, aes(x=Only.child))+
geom_bar()
ggplot(complete.data, aes(x=Village...town, fill=Education))+
geom_bar()
ggplot(complete.data, aes(x=Village...town, fill=c("Red","Blue")))+
geom_bar()
ggplot(complete.data, aes(x=Village...town, fill=Village...town))+
geom_bar()
ggplot(complete.data, aes(x=Village...town, col="red"))+
geom_bar()
ggplot(complete.data, aes(x=Village...town))+
geom_bar(col = c("orange", "green"))
ggplot(complete.data, aes(x=Village...town, col = c("orange", "green")))+
geom_bar(col = c("orange", "green"))
ggplot(complete.data, aes(x=Village...town, col = c("orange", "green")))+
geom_bar(fill = c("orange", "green"))
ggplot(complete.data, aes(x=Village...town))+
geom_bar(fill = c("orange", "green"))
ggplot(complete.data, aes(x=Only.child))+
geom_bar()
ggplot(complete.data, aes(x=Only.child, fill = "black"))+
geom_bar(fill = c("black", "white"))
ggplot(complete.data, aes(x=Height, fill=Gender))+
geom_bar()
ggplot(complete.data, aes(x=Weight, fill=Gender))+
geom_bar()
table(complete.data$Heights)
table(complete.data$Height)
ggplot(complete.data, aes(x=Height, fill=Gender))+
geom_bar()
install.packages("ggpubr")
library("ggpubr")
ggqqplot(complete.data$Music)
ggqqplot(complete.data$Slow.songs.or.fast.songs)
a <- colnames(complete.data)
par(mfrow=(2,2))
par(mfrow=c(2,2))
ggqqplot(complete.data$Slow.songs.or.fast.songs)
for(i in 1:10) {
ggqqplot(complete.data$a[i])
}
for(i in 1:10) {
ggqqplot(complete.data[,i])
}
par(mfrow=c(1,1))
?corrplot
library(corrplot)
?corrplot
corr <- cor(data1)
corrplot(corr, method="number", tl.cex = 0.7)
?corrplot
corrplot(corr, method="circle", tl.cex = 0.7)
corrplot(corr, method="elipse", tl.cex = 0.7)
ggqqplot(complete.data[,2]
ggqqplot(complete.data[,2])
ggqqplot(complete.data[,2])
ggqqplot(complete.data[,3])
ggqqplot(complete.data[,4])
ggqqplot(complete.data[,5])
corrplot(corr, method="ellipse", tl.cex = 0.7)
corrplot(corr, method="ellipse", tl.cex = 0.7)
data1
corr <- cor(data1)
corr
corr <- cor(complete.data)
data1 <- complete.data[,1:73]  #PCA, EFA등 돌릴 변수
data2 <- complete.data[,74:150] #추후 클러스터링 후에 각 클러스터 특징 분석시 사용할 변수
corr <- cor(data1)
corrplot(corr, method="ellipse", tl.cex = 0.7)
corrplot(corr, method="number", tl.cex = 0.7)
ggqqplot(complete.data[,1])
ggqqplot(complete.data[,2])
ggqqplot(complete.data[,3])
ggqqplot(complete.data[,4])
ggqqplot(complete.data[,5])
##############################
## Example: Iris Data (QDA) ##
##############################
install.packages("heplots")
